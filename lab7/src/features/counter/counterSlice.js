import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

const initialState = {
  //value: 0,
  status: 'idle',
  games: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/*export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    return response.data;
  }
);*/

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToState: (state, game) => {
      state.games.push(game.payload)
    },
    deleteGame: (state, name) => {
      state.games = state.games.filter(item => item.name !== name.payload)
    },
    updateGame: (state, action) => {
      let id = action.payload.id
      let selected_game = action.payload.selected_game
      state.games = state.games.map(game => {
        if(game.id === id){
            return {
                id: game.id,
                author: selected_game.author,
                name: selected_game.name,
                price: selected_game.price,
                description: selected_game.description,
                system_requirements: selected_game.system_requirements,
                notes: game.notes
            }
        }else{
            return game
        }
      })
    },
    addNote: (state, action) => {
      let curr_game = action.payload.game;
      let note = action.payload.note;
      console.log(note)
      console.log(curr_game)
      state.games = state.games.map(game => {
        if(game.id === curr_game.id){
            return {
                id: curr_game.id,
                author: curr_game.author,
                name: curr_game.name,
                price: curr_game.price,
                description: curr_game.description,
                system_requirements: curr_game.system_requirements,
                notes: [...curr_game.notes, note]
            }
        }else{
            return game
        }
      })
    },
    handleNote: (state, action) => {
      const id = action.payload.id;
      const newNotes = action.payload.newNotes;
      state.games = state.games.map(game =>{
        if(game.id !== id){
            return game;
        }else{
            return {
                id: game.id,
                author: game.author,
                name: game.name,
                price: game.price,
                description: game.description,
                system_requirements: game.system_requirements,
                notes: newNotes
            }
        }
      })
    }
    // Use the PayloadAction type to declare the contents of `action.payload`
    /*incrementByAmount: (state, action) => {
      state.value += action.payload;
    },*/
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  /*extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },*/
});

export const { addToState, updateGame, deleteGame, addNote, handleNote/*, incrementByAmount */} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//export const selectCount = (state) => state.counter.value;
export const getGames = (state) => state.counter.games;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default counterSlice.reducer;
